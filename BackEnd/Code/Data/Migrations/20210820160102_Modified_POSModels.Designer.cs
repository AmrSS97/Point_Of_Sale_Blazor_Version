// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DBEntities))]
    [Migration("20210820160102_Modified_POSModels")]
    partial class Modified_POSModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Bill", b =>
                {
                    b.Property<Guid>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("TotalValue")
                        .HasColumnType("double");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("BillID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryImagePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("46810525-690d-4629-8f34-4c3001f1c39d"),
                            CategoryImagePath = "C://Users//AmrSherief//PointOfSale",
                            CategoryName = "Beverages",
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 297, DateTimeKind.Local).AddTicks(9430),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 297, DateTimeKind.Local).AddTicks(9458),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        },
                        new
                        {
                            CategoryID = new Guid("c2ae1bde-9e68-403a-99ac-c1cd1d20f9b9"),
                            CategoryImagePath = "C://Users//AmrSherief//PointOfSale",
                            CategoryName = "Dairy",
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 298, DateTimeKind.Local).AddTicks(1201),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 298, DateTimeKind.Local).AddTicks(1219),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        },
                        new
                        {
                            CategoryID = new Guid("e23b1970-fc07-458a-85a3-9ed6e63d4486"),
                            CategoryImagePath = "C://Users//AmrSherief//PointOfSale",
                            CategoryName = "Meat",
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 298, DateTimeKind.Local).AddTicks(1532),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 298, DateTimeKind.Local).AddTicks(1538),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        },
                        new
                        {
                            CategoryID = new Guid("564a7f8c-f6c6-4e11-8420-c4e386fd9429"),
                            CategoryImagePath = "C://Users//AmrSherief//PointOfSale",
                            CategoryName = "Personal Care",
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 298, DateTimeKind.Local).AddTicks(1562),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 298, DateTimeKind.Local).AddTicks(1565),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        });
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = new Guid("31a2cb54-a26e-460d-a92c-d7645bc6d2eb"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(849),
                            CustomerAddress = "205 Sorya Street,Roushdy",
                            CustomerEmail = "hassanmohammed67@hotmail.com",
                            CustomerPhone = "+201256262161",
                            FullName = "Hassan Mohammed Ahmed",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(866),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        },
                        new
                        {
                            CustomerID = new Guid("31a2cb54-a26e-460d-a92c-d7645bc6d2ea"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(1521),
                            CustomerAddress = "205 Sorya Street,Roushdy",
                            CustomerEmail = "hassanmohammed67@hotmail.com",
                            CustomerPhone = "+201256262161",
                            FullName = "Hassan Mohammed Ahmed",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(1528),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        },
                        new
                        {
                            CustomerID = new Guid("1e22e307-a365-4e17-9f1b-1120a2da601f"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(1547),
                            CustomerAddress = "208 Sorya Street,Roushdy",
                            CustomerEmail = "khalihassan_77@hotmail.com",
                            CustomerPhone = "+201257262161",
                            FullName = "Khalid Hassan Ahmed",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(1549),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        },
                        new
                        {
                            CustomerID = new Guid("098b6065-11ea-4a8e-961c-247f846329b6"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(1566),
                            CustomerAddress = "203 Horeya Street,Sidi gaber",
                            CustomerEmail = "gehanmohammed98@gmail.com",
                            CustomerPhone = "+201256263361",
                            FullName = "Gehan Mohamed Khalil",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 296, DateTimeKind.Local).AddTicks(1567),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253")
                        });
                });

            modelBuilder.Entity("Models.Feature", b =>
                {
                    b.Property<Guid>("FeatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FeatureName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FeatureNameAr")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MenuIcon")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("FeatureID");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            FeatureID = new Guid("6899c2c5-5860-4994-a7e2-d061aed3e0c4"),
                            FeatureName = "Security",
                            FeatureNameAr = "نظام الحماية",
                            MenuIcon = "icon-wrench"
                        },
                        new
                        {
                            FeatureID = new Guid("5e3d5747-9a45-4541-86ad-03c5bc659714"),
                            FeatureName = "Control Panel",
                            FeatureNameAr = "لوحة التحكم",
                            MenuIcon = "icon-settings"
                        });
                });

            modelBuilder.Entity("Models.Item", b =>
                {
                    b.Property<Guid>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("char(36)");

                    b.HasKey("ItemID");

                    b.HasIndex("BillID");

                    b.HasIndex("ProductID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Models.NotificationAction", b =>
                {
                    b.Property<Guid>("NotificationActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("NotificationActionID");

                    b.ToTable("NotificationActions");

                    b.HasData(
                        new
                        {
                            NotificationActionID = new Guid("0160f613-f583-4a5f-a15a-4461afaef8be"),
                            ActionName = "ForgetPassword",
                            TitleEn = "Forget password"
                        },
                        new
                        {
                            NotificationActionID = new Guid("ceb98ab9-8390-4ebb-999d-be6de77b21c6"),
                            ActionName = "VerifyUser",
                            TitleEn = "Verify user"
                        });
                });

            modelBuilder.Entity("Models.NotificationSetting", b =>
                {
                    b.Property<Guid>("NotificationSettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NotificationActionID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NotificationTypeID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TemplateName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("NotificationSettingID");

                    b.HasIndex("NotificationActionID");

                    b.HasIndex("NotificationTypeID");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new
                        {
                            NotificationSettingID = new Guid("46d44ee1-f477-435f-b0b2-87ae3b80b6d0"),
                            NotificationActionID = new Guid("0160f613-f583-4a5f-a15a-4461afaef8be"),
                            NotificationTypeID = new Guid("c8d58b31-3fa8-44ab-b24f-fa85ad33c954"),
                            Subject = "Change password",
                            TemplateName = "ForgetPassword"
                        },
                        new
                        {
                            NotificationSettingID = new Guid("a1c8df0c-ccfa-4e41-889a-8851247c2fd0"),
                            NotificationActionID = new Guid("ceb98ab9-8390-4ebb-999d-be6de77b21c6"),
                            NotificationTypeID = new Guid("c8d58b31-3fa8-44ab-b24f-fa85ad33c954"),
                            Subject = "Verify user",
                            TemplateName = "verification"
                        },
                        new
                        {
                            NotificationSettingID = new Guid("672cf768-aff5-41fd-84c4-2d0b8fa81996"),
                            NotificationActionID = new Guid("ceb98ab9-8390-4ebb-999d-be6de77b21c6"),
                            NotificationTypeID = new Guid("f5702875-5374-4b55-87dd-3da62895f6fb"),
                            Subject = "Verify user",
                            TemplateName = "verificationSMS"
                        });
                });

            modelBuilder.Entity("Models.NotificationType", b =>
                {
                    b.Property<Guid>("NotificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("TypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("NotificationTypeID");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            NotificationTypeID = new Guid("c8d58b31-3fa8-44ab-b24f-fa85ad33c954"),
                            TypeName = "Email"
                        },
                        new
                        {
                            NotificationTypeID = new Guid("f5702875-5374-4b55-87dd-3da62895f6fb"),
                            TypeName = "SMS"
                        },
                        new
                        {
                            NotificationTypeID = new Guid("c74cedbf-53bc-4020-b168-46bd6fde0ddf"),
                            TypeName = "InAppNotification"
                        });
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("ProductDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductImagePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("7d4edeb4-6125-4e55-b048-54d36e494c2b"),
                            CategoryID = new Guid("e23b1970-fc07-458a-85a3-9ed6e63d4486"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(408),
                            DiscountPercentage = 10,
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(443),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            Price = 50.0,
                            ProductDetails = "about 20pcs/kg",
                            ProductImagePath = "C://Users//AmrSherief//Desktop//PointOfSale",
                            ProductName = "beef sausage",
                            Stock = 100,
                            SupplierID = new Guid("9c03f412-e4ad-40f5-9cdb-c5efab612acf")
                        },
                        new
                        {
                            ProductID = new Guid("5fe0698c-0b07-444d-9927-0604438280b8"),
                            CategoryID = new Guid("c2ae1bde-9e68-403a-99ac-c1cd1d20f9b9"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(7818),
                            DiscountPercentage = 5,
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(7839),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            Price = 20.0,
                            ProductDetails = "about 4pcs/kg",
                            ProductImagePath = "C://Users//AmrSherief//Desktop//PointOfSale",
                            ProductName = "old romano cheese",
                            Stock = 150,
                            SupplierID = new Guid("33b3885b-bf26-43b4-a214-b54b7f682696")
                        },
                        new
                        {
                            ProductID = new Guid("1e912fee-ddae-496d-a1c1-35e71491ab66"),
                            CategoryID = new Guid("564a7f8c-f6c6-4e11-8420-c4e386fd9429"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(8007),
                            DiscountPercentage = 3,
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(8013),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            Price = 15.0,
                            ProductDetails = "soap with flower scent",
                            ProductImagePath = "C://Users//AmrSherief//Desktop//PointOfSale",
                            ProductName = "dove soap",
                            Stock = 50,
                            SupplierID = new Guid("34b3995b-bf26-43b4-a214-b54b7f682786")
                        },
                        new
                        {
                            ProductID = new Guid("bde7c71c-770c-4549-83e3-0df753954a74"),
                            CategoryID = new Guid("46810525-690d-4629-8f34-4c3001f1c39d"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(8064),
                            DiscountPercentage = 2,
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 302, DateTimeKind.Local).AddTicks(8067),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            Price = 10.0,
                            ProductDetails = "coca cola can 200ml",
                            ProductImagePath = "C://Users//AmrSherief//Desktop//PointOfSale",
                            ProductName = "coca cola",
                            Stock = 200,
                            SupplierID = new Guid("34b3885b-bf26-43b4-a214-b54b7f682796")
                        });
                });

            modelBuilder.Entity("Models.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PurchasedQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("char(36)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("PurchaseOrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SupplierID");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Models.Right", b =>
                {
                    b.Property<Guid>("RightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FeatureID")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuIcon")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("RightCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RightName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RightNameAr")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RightOrder")
                        .HasColumnType("int");

                    b.Property<string>("RightURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RightID");

                    b.HasIndex("FeatureID");

                    b.ToTable("Rights");

                    b.HasData(
                        new
                        {
                            RightID = new Guid("4edc50ca-a7c0-4278-8930-707ec2e5919c"),
                            FeatureID = new Guid("6899c2c5-5860-4994-a7e2-d061aed3e0c4"),
                            IsVisible = true,
                            MenuIcon = "icon-docs",
                            RightCode = "roles",
                            RightName = "Manage Roles",
                            RightNameAr = "ادارة الادوار",
                            RightOrder = 1,
                            RightURL = "#/pages/roles"
                        },
                        new
                        {
                            RightID = new Guid("78831e46-adab-41ed-a9de-4d5229ccb15f"),
                            FeatureID = new Guid("6899c2c5-5860-4994-a7e2-d061aed3e0c4"),
                            IsVisible = true,
                            MenuIcon = "icon-users",
                            RightCode = "users",
                            RightName = "Manage Users",
                            RightNameAr = "ادارة المستخدمين",
                            RightOrder = 2,
                            RightURL = "#/pages/users"
                        });
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsSystemRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleNameAr")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = new Guid("7232fe79-deab-41dc-a54d-f83d388d4f09"),
                            IsSystemRole = true,
                            RoleName = "admin"
                        });
                });

            modelBuilder.Entity("Models.RoleRight", b =>
                {
                    b.Property<Guid>("RoleRightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RightID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("char(36)");

                    b.HasKey("RoleRightID");

                    b.HasIndex("RightID");

                    b.HasIndex("RoleID");

                    b.ToTable("RoleRights");

                    b.HasData(
                        new
                        {
                            RoleRightID = new Guid("0de0622b-97db-4edd-acfa-a5adeb81673b"),
                            RightID = new Guid("4edc50ca-a7c0-4278-8930-707ec2e5919c"),
                            RoleID = new Guid("7232fe79-deab-41dc-a54d-f83d388d4f09")
                        },
                        new
                        {
                            RoleRightID = new Guid("8ac6ded6-4c93-4d95-8396-b526925d322d"),
                            RightID = new Guid("78831e46-adab-41ed-a9de-4d5229ccb15f"),
                            RoleID = new Guid("7232fe79-deab-41dc-a54d-f83d388d4f09")
                        });
                });

            modelBuilder.Entity("Models.Sale", b =>
                {
                    b.Property<Guid>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.HasKey("SaleID");

                    b.HasIndex("BillID");

                    b.HasIndex("ProductID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Models.Supplier", b =>
                {
                    b.Property<Guid>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("SupplierEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SupplierName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SupplierPhone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierID = new Guid("9c03f412-e4ad-40f5-9cdb-c5efab612acf"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 293, DateTimeKind.Local).AddTicks(386),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 293, DateTimeKind.Local).AddTicks(9458),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            SupplierEmail = "alimohamed96@gmail.com",
                            SupplierName = "Ali Mohammed Ahmed",
                            SupplierPhone = "+201220073453"
                        },
                        new
                        {
                            SupplierID = new Guid("33b3885b-bf26-43b4-a214-b54b7f682696"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 294, DateTimeKind.Local).AddTicks(1920),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 294, DateTimeKind.Local).AddTicks(1934),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            SupplierEmail = "hassankhalil97@gmail.com",
                            SupplierName = "Hassan Khalil Hemdan",
                            SupplierPhone = "+201113272171"
                        },
                        new
                        {
                            SupplierID = new Guid("34b3885b-bf26-43b4-a214-b54b7f682796"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 294, DateTimeKind.Local).AddTicks(1970),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 294, DateTimeKind.Local).AddTicks(1972),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            SupplierEmail = "ammar_mohamed@hotmail.com",
                            SupplierName = "Ammar Mohamed Ahmed",
                            SupplierPhone = "+01445676898"
                        },
                        new
                        {
                            SupplierID = new Guid("34b3995b-bf26-43b4-a214-b54b7f682786"),
                            CreatedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            CreationDate = new DateTime(2021, 8, 20, 18, 1, 1, 294, DateTimeKind.Local).AddTicks(1979),
                            IsDeleted = false,
                            ModificationDate = new DateTime(2021, 8, 20, 18, 1, 1, 294, DateTimeKind.Local).AddTicks(1980),
                            ModifiedBy = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            SupplierEmail = "galal_sayed@hotmail.com",
                            SupplierName = "Galal Sayed Ahmed",
                            SupplierPhone = "+01245676878"
                        });
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssociatedCompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("d1364e8b-58e2-423b-a048-03ffd7ef6253"),
                            FullName = " Admin",
                            IsActive = true,
                            RoleID = new Guid("7232fe79-deab-41dc-a54d-f83d388d4f09"),
                            UserEmail = "admin@admin.com",
                            UserName = "admin",
                            UserPassword = "ꉟ뺾"
                        });
                });

            modelBuilder.Entity("Models.Bill", b =>
                {
                    b.HasOne("Models.Customer", "Customer")
                        .WithMany("BillList")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.Item", b =>
                {
                    b.HasOne("Models.Bill", "Bill")
                        .WithMany("ItemList")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Product", "Product")
                        .WithMany("ItemList")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.NotificationSetting", b =>
                {
                    b.HasOne("Models.NotificationAction", "NotificationAction")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("NotificationActionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Supplier", "Supplier")
                        .WithMany("SuppliedProducts")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.PurchaseOrder", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.Right", b =>
                {
                    b.HasOne("Models.Feature", "Feature")
                        .WithMany("Rights")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.RoleRight", b =>
                {
                    b.HasOne("Models.Right", "Right")
                        .WithMany("RoleRights")
                        .HasForeignKey("RightID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Role", "Role")
                        .WithMany("RoleRights")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.Sale", b =>
                {
                    b.HasOne("Models.Bill", "Bill")
                        .WithMany("Sales")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Product", "Product")
                        .WithMany("ProductSales")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
